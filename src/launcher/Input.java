package launcher;

import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

/**
 * Class representing all Input from the last frame.
 * 
 * @author Dan Bryce
 */
public class Input {

    enum EventType {
        PRESSED,
        RELEASED
    }

    /**
     * Event generated by some input device.
     */
    public static class InputEvent {

        /**
         * ID of the key that was pressed / released.
         */
        protected int keyId;

        /**
         * Type of event generated.
         */
        protected EventType type;

        public InputEvent(int keyId, EventType type) {
            this.keyId = keyId;
            this.type = type;
        }
        
        public int getKeyId() {
            return keyId;
        }
        
        public EventType getType() {
            return type;
        }

    }
    
    /**
     * Event generated by the keyboard.
     */
    public static class KeyEvent extends InputEvent {
        
        /**
         * Character corresponding to the key that was pressed / released.
         */
        private char keyChar;

        public KeyEvent(int keyId, char keyChar, EventType type) {
            super(keyId, type);
            this.keyChar = keyChar;
        }
        
        public char getKeyChar() {
            return keyChar;
        }
        
    }

    /**
     * Event generated by the mouse.
     */
    public static class MouseEvent extends InputEvent {
        
        /**
         * Mouse position when the event was generated.
         */
        private int mouseX, mouseY;
        
        public MouseEvent(int keyId, int mouseX, int mouseY, EventType type) {
            super(keyId, type);
            this.mouseX = mouseX;
            this.mouseY = mouseY;
        }
        
        public int getMouseX() {
            return mouseX;
        }
        
        public int getMouseY() {
            return mouseY;
        }
        
    }

    /**
     * Keys currently held down.
     */
    private Set<Integer> keysDown = new HashSet<>();

    /**
     * Keys pressed this frame.
     */
    private Set<Integer> keysPressed = new HashSet<>();

    /**
     * Keys released this frame.
     */
    private Set<Integer> keysReleased = new HashSet<>();

    /**
     * Mouse buttons currently held down.
     */
    private Set<Integer> mouseButtonsDown = new HashSet<>();

    /**
     * Mouse buttons pressed this frame.
     */
    private Set<Integer> mouseButtonsPressed = new HashSet<>();

    /**
     * Mouse buttons released this frame.
     */
    private Set<Integer> mouseButtonsReleased = new HashSet<>();
    
    /**
     * Key events, in the order in which they were generated.
     */
    private List<InputEvent> events = new ArrayList<>();

    /**
     * Current mouse position.
     */
    private int mouseX, mouseY;

    /**
     * Clears any unprocessed input events.
     * 
     * <p>Should be called each frame before input handling.
     */
    public void prepareForNextFrame() {
        events.clear();
        keysPressed.clear();
        keysReleased.clear();
        mouseButtonsPressed.clear();
        mouseButtonsReleased.clear();
    }

    /**
     * Adds a KeyEvent to the list of events to be processed.
     * 
     * @param event
     */
    public void addKeyEvent(KeyEvent event) {
        events.add(event);
        
        if (event.type == EventType.PRESSED) {
            keysPressed.add(event.keyId);
            keysDown.add(event.keyId);
        } else {
            keysReleased.add(event.keyId);
            keysDown.remove(event.keyId);
        }
    }

    /**
     * Adds a MouseEvent to the list of events to be processed.
     * 
     * @param event
     */
    public void addMouseEvent(MouseEvent event) {
        events.add(event);

        if (event.type == EventType.PRESSED) {
            mouseButtonsPressed.add(event.keyId);
            mouseButtonsDown.add(event.keyId);
        } else {
            mouseButtonsReleased.add(event.keyId);
            mouseButtonsDown.remove(event.keyId);
        }
    }

    /**
     * List the list of InputEvents to be processed.
     * 
     * @return
     */
    public List<InputEvent> getEvents() {
        return events;
    }
    
    /**
     * Determines if the key with the given ID is held down.
     * 
     * @param keyId
     * @return
     */
    public boolean isKeyDown(int keyId) {
        return keysDown.contains(keyId);
    }

    /**
     * Determines if the key with the given ID was pressed this frame.
     * 
     * @param keyId
     * @return
     */
    public boolean wasKeyPressed(int keyId) {
        return keysPressed.contains(keyId);
    }

    /**
     * Determines if the key with the given ID was released this frame.
     * 
     * @param keyId
     * @return
     */
    public boolean wasKeyReleased(int keyId) {
        return keysReleased.contains(keyId);
    }

    /**
     * Determines if the mouse button with the given ID is held down.
     * 
     * @param keyId
     * @return
     */
    public boolean isMouseButtonDown(int keyId) {
        return keysDown.contains(keyId);
    }

    /**
     * Determines if the mouse button with the given ID was pressed this frame.
     * 
     * @param keyId
     * @return
     */
    public boolean wasMouseButtonPressed(int keyId) {
        return mouseButtonsPressed.contains(keyId);
    }

    /**
     * Determines if the mouse button with the given ID was released this frame.
     * 
     * @param keyId
     * @return
     */
    public boolean wasMouseButtonReleased(int keyId) {
        return mouseButtonsReleased.contains(keyId);
    }
    
    /**
     * Gets the current mouse position.
     * 
     * @return
     */
    public int getMouseX() {
        return mouseX;
    }

    /**
     * Gets the current mouse position.
     * 
     * @return
     */
    public int getMouseY() {
        return mouseY;
    }

    /**
     * Sets the current mouse position.
     * 
     * @param x
     * @param y
     */
    public void setMousePos(int x, int y) {
        this.mouseX = x;
        this.mouseY = y;
    }

}
